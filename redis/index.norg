* (-) Section 1: Get Started Here!
** (x) [4. Why Use Redis? (4/23)]{:4. Why Use Redis?:}
** (x) [5. Initial Setup (3/10)]{:5. Initial Setup:}
** (x) [6. A Touch More Setup (5/18)]{:6. A Touch More Setup:}
** (x) [7. Running RBook Locally (1/5)]{:7. Running RBook Locally:}
** (x) [8. Basic Commands (4/14)]{:8. Basic Commands:}
** (x) [9. Documentation on Commands (6/20)]{:9. Documentation on Commands:}
** (x) [10. Variations of SET (5/16)]{:10. Variations of SET:}
** (x) [11. Use Case of Expiration Options (7/28)]{:11. Use Case of Expiration Options:}
** (x) [12. Setting Multiple Keys (5/18)]{:12. Setting Multiple Keys:}
** (x) [13. GET and MGET (1/7)]{:13. GET and MGET:}
** (x) [14. String Ranges (4/13)]{:14. String Ranges:}
** (x) [15. Are These Commands Even Useful? (10/26)]{:15. Are These Commands Even Useful?:}
** (x) [16. Dealing with Numbers (5/24)]{:16. Dealing with Numbers:}
** (x) [17. Again... Why do These Commands Exist? (9/22)]{:17. Again... Why do These Commands Exist?:}
** (x) [24. Don't Skip This Video (8/15)]{:24. Don't Skip This Video:}
** (x) [25. Redis Client Libraries (10/28)]{:25. Redis Client Libraries:}
** (x) [26. First Implementation Task (4/13)]{:26. First Implementation Task:}
** (x) [27. Redis Design Methodology (9/23)]{:27. Redis Design Methodology:}
** (x) [28. Key Naming Methodology (6/21)]{:28. Key Naming Methodology:}
** (x) [29. Adding Page Caching (7/20)]{:29. Adding Page Caching:}
** (x) [30. Better Key Generation (5/13)]{:30. Better Key Generation:}
** (x) [33. Hashes in Redis (2/12)]{:33. Hashes in Redis:}
** (x) [34. Storing and Retrieving Hashes (5/14)]{:34. Storing and Retrieving Hashes:}
** (x) [35. Deleting Hash Data (3/11)]{:35. Deleting Hash Data:}
** (x) [37. Numbers in Hashes (5/17)]{:36. Numbers in Hashes:}
** (x) [38. Slightly Unpredictable HSET and HGETALL (4/18)]{:38. Slightly Unpredictable HSET and HGETALL:}
** (x) [39. Issues with HSET (7/22)]{:39. Issues with HSET:}
** (x) [40. Issues with HGETALL (6/14)]{:40. Issues with HGETALL:}
** (x) [41. App Overview (9/36)]{:41. App Overview:}
** (x) [42. Reducing the Design to Queries (7/25)]{:42. Reducing the Design to Queries:}
** (x) [43. What Data Type for Each Resource (6/17)]{:43. What Data Type for Each Resource:}
** (x) [44. Create User Implementation (10/36)]{:44. Create User Implementation:}
** (x) [45. Serialization and Deserialization (11/29)]{:45. Serialization and Deserialization:}
** (x) [46. Adding Serialize (1/9)]{:46. Adding Serialize:}
** (x) [47. Fetching a User (4/14)]{:47. Fetching a User:}
** (x) [48. Implementing Sessions (7/25)]{:48. Implementing Sessions:}
** (x) [49. Fetching a Saved Session (7/25)]{:49. Fetching a Saved Session:}
** (x) [50. Creating Sessions (3/16)]{:50. Creating Sessions:}
** (x) [51. Serializing Date Times (4/14)]{:51. Serializing Date Times:}
** (x) [52. Storing Items (7/45)]{:52. Storing Items:}
** (x) [53. Fetching a Single Item (8/26)]{:53. Fetching a Single Item:}
** (x) [54. Batching Commands with Pipelines (4/17)]{:54. Batching Commands with Pipelines:}
** (x) [55. Running Multiple Commands at the Same Time (6/29)]{:55. Running Multiple Commands at the Same Time:}
** (x) [56. Executing a Pipeline (4/21)]{:56. Executing a Pipeline:}
* Section 9: Enforcing Uniqueness with Sets
** (x) [57. Basics of Sets (4/15)]{:57. Basics of Sets:}
** (x) [58. Union of Sets (4/15)]{:58. Union of Sets:}
** (x) [59. Intersection of Sets (1/4)]{:59. Intersection of Sets:}
** (x) [60. Difference of Sets (2/9)]{:60. Difference of Sets:}
** (x) [61. Store Variations (2/12)]{:61. Store Variations:}
** (x) [62. Checking for an Element in a Set (2/10)]{:62. Checking for an Element in a Set:}
** (x) [63. Scanning a Set (5/25)]{:63. Scanning a Set:}
** (x) [65. Most Common Use Cases of Sets (6/15)]{:65. Most Common Use Cases of Sets:}
* Section 10: A Little Set Implementation
** (x) [66. Requiring Unique User Names (6/40)]{:66. Requiring Unique User Names:}
** (x) [67. Adding a Like System (5/28)]{:67. Adding a Like System:}
** (x) [68. How to Count the Number of Likes? (6/27)]{:68. How to Count the Number of Likes?:}
** (x) [69. Updating Like Quantities (5/44)]{:69. Updating Like Quantities:}
** (x) [70. Showing Liked Items (3/38)]{:70. Showing Liked Items:}
** (x) [71. Showing Common Liked Items (2/20)]{:71. Showing Common Liked Items:}
* Section 11: Organizing Data with Sorted Sets
** (x) [72. Sorted Sets (3/10)]{:72. Sorted Sets:}
** (x) [73. Adding and Removing Members (4/15)]{:73. Adding and Removing Members:}
** (x) [74. Finding a Range of Scores (5/17)]{:74. Finding a Range of Scores:}
** (x) [75. Removing the Highest and Lowest Members (2/9)]{:75. Removing the Highest and Lowest Members:}
** (x) [76. Updating Scores (2/16)]{:76. Updating Scores:}
** (x) [77. Querying a Sorted Set (9/34)]{:77. Querying a Sorted Set:}
* Section 12: Practice Time with Sorted Sets!
** (x) [79. Sorted Set Use Cases (9/28)]{:79. Sorted Set Use Cases:}
** (x) [80. Reminder on the Auth Flow (5/21)]{:80. Reminder on the Auth Flow:}
** (x) [81. Storing Usernames (4/25)]{:81. Storing Usernames:}
** (x) [82. Kind of Storing Strings in Sorted Sets (3/11)]{:82. Kind of Storing Strings in Sorted Sets:}
** (x) [83. Converting User IDs (6/35)]{:83. Converting User IDs:}
** (x) [84. Plan for Showing Most Viewed Items (5/34)]{:84. Plan for Showing Most Viewed Items:}
** (x) [85. Initializing Views on Item Creation (5/20)]{:85. Initializing Views on Item Creation:}
** (x) [86. Incrementing View Counters (4/35)]{:86. Incrementing View Counters:}
** (x) [87. Items by Ending Soonest (7/40)]{:87. Items by Ending Soonest:}
** (x) [88. Querying for Ending Soonest (11/50)]{:88. Querying for Ending Soonest:}
* Section 13: From Relational Data to Redis
** (x) [89. Loading Relational Data (7/29)]{:89. Loading Relational Data:}
** (x) [90. Relational Data with SORT (5/29)]{:90. Relational Data with SORT:}
** (x) [91. The Sort Command (6/14)]{:91. The Sort Command:}
** (x) [92. Terminology Around Sort (8/23)]{:92. Terminology Around Sort:}
** (x) [93. Specifying the BY Argument (6/19)]{:93. Specifying the BY Argument:}
** (x) [94. Joining Data with Sort (9/27)]{:94. Joining Data with Sort:}
** (x) [95. A Few More Arguments (9/39)]{:95. A Few More Arguments:}
** (x) [96. Parsing SORT Output (8/40)]{:96. Parsing SORT Output:}
* Section 14: HyperLogLog Structure
** (x) [98. HyperLogsLogs (5/14)]{:98. HyperLogsLogs:}
** (x) [99. When to use HyperLogsLogs (7/23)]{:99. When to use HyperLogsLogs:}
** (x) [100. HyperLogsLogs in Action (5/28)]{:100. HyperLogsLogs in Action:}
* Section 15: Storiing Collections with Lists
** (x) [101. Lists (3/12)]{:101. Lists:}
** (x) [102. Reading and Writing Data to a List (4/20)]{:102. Reading and Writing Data to a List:}
** (x) [103. Ranges and Searches (6/32)]{:103. Ranges and Searches:}
** (x) [104. Trimming Lists (5/21)]{:104. Trimming Lists:}
** (x) [105. Removing Elements (5/17)]{:105. Removing Elements:}
** (x) [106. List Use Cases (10/24)]{:106. List Use Cases:}
** (x) [107. Using Lists in Our App (4/18)]{:107. Using Lists in Our App:}
** (x) [108. Serializing and Deserializing Bids (6/22)]{:108. Serializing and Deserializing Bids:}
** (x) [109. Retrieving Bid Histories (13/32)]{:109. Retrieving Bid Histories:}
* Section 16: More Practice with the E-Commerce App
** (x) [110. More on Bids (4/18)]{:110. More on Bids:}
** (x) [111. Validating Bids (5/23)]{:111. Validating Bids:}
** (x) [112. Updating Items with Bids (3/28)]{:112. Updating Items with Bids:}
** (x) [113. Issues with Bids (4/16)]{:113. Issues with Bids:}
** (x) [114. Understanding Concurrency Issues (10/21)]{:114. Understanding Concurrency Issues:}
** (x) [115. Applying Atomic Updates (8/23)]{:115. Applying Atomic Updates:}
** (x) [116. Transactions (5/17)]{:116. Transactions:}
** (x) [117. Watching a Key with Transactions (3/19)]{:117. Watching a Key with Transactions:}
** (x) [118. Isolated Connections for Transactions (4/11)]{:118. Isolated Connections for Transactions:}
** (x) [119. Solving Multiple Bids with a Transaction (6/37)]{:119. Solving Multiple Bids with a Transaction:}
** (x) [120. Items by Price (5/30)]{:120. Items by Price:}
** (x) [121. More on Items by Price (3/12)]{:121. More on Items by Price:}
* Section 17: Extending Redis with Scripting
** (x) [122. Lua Scripting (3/12)]{:122. Lua Scripting:}
** (x) [123. Basics of Lua (6/29)]{:123. Basics of Lua:}
** (x) [124. Handling Arrays (3/10)]{:124. Handling Arrays:}
** (x) [125. Handling Tables (4/21)]{:125. Handling Tables:}
** (x) [126. Loading and Executing Scripts (5/14)]{:126. Loading and Executing Scripts:}
** (x) [127. Providing Arguments (6/22)]{:127. Providing Arguments:}
** (x) [128. Providing Key lists (7/30)]{:128. Providing Key lists:}
** (x) [129. When to Use Scripts (4/16)]{:129. When to Use Scripts:}
** (x) [130. Custom Scripts with Node-Redis (5/23)]{:130. Custom Scripts with Node-Redis:}
** (x) [131. Lua Script Integration (12/42)]{:131. Lua Script Integration:}
** (x) [132. Creating a View-Incrementing Script (20/55)]{:132. Creating a View-Incrementing Script:}
** ( ) [133. Code Cleanup (1/)]{:133. Code Cleanup:}
** (x) [134. Concurrency Revisited (8/43)]{:134. Concurrency Revisited:}
** (x) [135. Issues with WATCH (5/12)]{:135. Issues with WATCH:}
** (x) [136. Overview of a Lock (6/26)]{:136. Overview of a Lock:}
** (x) [137. Understanding the Goal (4/30)]{:137. Understanding the Goal:}
** (x) [138. Implementing WithLock (11/48)]{:138. Implementing WithLock:}
** (x) [139. Using WithLock (3/11)]{:139. Using WithLock:}
** (x) [140. It Works! (3/13)]{:140. It Works!:}
** ( ) [141. Automatically Expiring Locks (8/)]{:141. Automatically Expiring Locks:}
** ( ) [142. Another Lock Issue (8/)]{:142. Another Lock Issue:}
** ( ) [143. Solving Accidental Unlocks (3/)]{:143. Solving Accidental Unlocks:}
** ( ) [144. Adding an Unlock Script (5/)]{:144. Adding an Unlock Script:}
** ( ) [145. One Last Issue (4/)]{:145. One Last Issue:}
** ( ) [146. Providing Expiration Signals (6/)]{:146. Providing Expiration Signals:}
** ( ) [147. Alternate Expiration Solution (7/)]{:147. Alternate Expiration Solution:}
** ( ) [148. Redis Modules (3/)]{:148. Redis Modules:}
** ( ) [149. Redis Core vs Redis Stack (2/)]{:149. Redis Core vs Redis Stack:}
** ( ) [150. Using Modules in Production (6/)]{:150. Using Modules in Production:}
** ( ) [151. Overview on Search (4/)]{:151. Overview on Search:}
** ( ) [152. Creating and Using an Index (7/)]{:152. Creating and Using an Index:}
** ( ) [153. Details on Indexes (8/)]{:153. Details on Indexes:}
** ( ) [154. Index Field Types (6/)]{:154. Index Field Types:}
** ( ) [155. Numeric Queries (6/)]{:155. Numeric Queries:}
** ( ) [156. Tag Queries (3/)]{:156. Tag Queries:}
** ( ) [157. Text Queries (5/)]{:157. Text Queries:}
** ( ) [158. Fuzzy Search (3/)]{:158. Fuzzy Search:}
** ( ) [159. Prefix Search (2/)]{:159. Prefix Search:}
** ( ) [160. Pre-Processing Search Criteria (5/)]{:160. Pre-Processing Search Criteria:}
** ( ) [161. Search Implementation (5/)]{:161. Search Implementation:}
** ( ) [162. The Create Index Function (4/)]{:162. The Create Index Function:}
** ( ) [163. When to Create the Index? (5/)]{:163. When to Create the Index?:}
** ( ) [164. Parsing the Search Term (6/)]{:164. Parsing the Search Term:}
** ( ) [165. Executing the Search (7/)]{:165. Executing the Search:}
** ( ) [166. Seeding Some Fake Data (3/)]{:166. Seeding Some Fake Data:}
** ( ) [167. RediSearch and TF-IDF (7/)]{:167. RediSearch and TF-IDF:}
** ( ) [168. Applying Weights to Fields (6/)]{:168. Applying Weights to Fields:}
** ( ) [169. Understanding Queries with EXPLAIN (5/)]{:169. Understanding Queries with EXPLAIN:}
** ( ) [170. Query Performance with PROFILE (3/)]{:170. Query Performance with PROFILE:}
** ( ) [171. Sorting and Searching (4/)]{:171. Sorting and Searching:}
** ( ) [172. Updating an Existing Index (5/)]{:172. Updating an Existing Index:}
** ( ) [173. Executing the Search (7/)]{:173. Executing the Search:}
** ( ) [174. Deserializing Search Results (3/)]{:174. Deserializing Search Results:}
** ( ) [175. Streams (2/)]{:175. Streams:}
** ( ) [176. Use Case of Streams (7/)]{:176. Use Case of Streams:}
** ( ) [177. Adding Messages to a Stream (3/)]{:177. Adding Messages to a Stream:}
** ( ) [178. Consuming Streams with XREAD (4/)]{:178. Consuming Streams with XREAD:}
** ( ) [179. Blocking Reads (7/)]{:179. Blocking Reads:}
** ( ) [180. An XREAD Shortcut (2/)]{:180. An XREAD Shortcut:}
** ( ) [181. A Little Gotcha Around Streams (5/)]{:181. A Little Gotcha Around Streams:}
** ( ) [182. Reading Streams with XRANGE (4/)]{:182. Reading Streams with XRANGE:}
** ( ) [183. Issues with Standard Streams (2/)]{:183. Issues with Standard Streams:}
** ( ) [184. Consumer Groups (5/)]{:184. Consumer Groups:}
** ( ) [185. Creating and Inspecting Consumer Groups (7/)]{:185. Creating and Inspecting Consumer Groups:}
** ( ) [186. Consumer Groups in Action (9/)]{:186. Consumer Groups in Action:}
** ( ) [187. Claiming Expired Messages (5/)]{:187. Claiming Expired Messages:}
** ( ) [188. Bonus! (1/)]{:188. Bonus!:}
