@document.meta
title: 29. Structs Basics
description: 
authors: mattc
categories: [
  Struct
  Instance
  Partial Moved
]
created: 2024-02-18T15:26:57+0800
updated: 2024-02-18T15:36:06+0800
version: 1.1.1
@end

* Struct

** create struct and its instance
   .image pic/15/1.png

   When creating an instance, each field defined in the struct must be given an initial value.

   In the example above, because it is assigned to an immutable variable, the values of any fields in the instance cannot be changed (this is different from JavaScript const instance).

The type of variable my_car will be our custom defined Car, struct is the only way we can customize types.


** partial moved
   When assigning a heap allocated field to a variable, it will cause ownership to move, which will make this instance become partially moved. We usually want to avoid this situation.

   .image pic/15/2.png

   .image pic/15/3.png


* Create new instance from existing instance

  We can use `..` to quickly copy the values of an existing instance, but we need to be careful with heap allocated fields.

  .image pic/15/4.png

  .image pic/15/5.png


* Tuple struct

** downside of regular tuple
   .image pic/15/6.png

   Above, our tuple uses meaningful variable names, but if it is passed into a function, the function parameter names may lose the original meaning of the variable names. In such cases, we can use tuple structs to solve this problem.

** build a tuple struct
   Tuple struct is similar to the original struct but without field names and uses parentheses instead of curly braces.

   .image pic/15/7.png

   Above, we create a tuple struct and generate an instance assigned to a variable, so even when passed into a function, we can still see its original meaning from its type.



* Unit struct

  It is not used very often, we will introduce its uses in the following lecture.

  .image pic/15/8.png
