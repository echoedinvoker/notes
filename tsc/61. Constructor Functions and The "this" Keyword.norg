@document.meta
title: 61. Constructor Functions and The "this" Keyword
description: 
authors: mattc
categories: [
  this
  Class as Type
]
created: 2023-11-30T22:43:11+0800
updated: 2023-11-30T22:44:05+0800
version: 1.1.1
@end

* Common ISSUE about keyword 'this'

  In addition to the constructor, we will create some methods as follows for instances generated by this class to call.

  .image pic/61/1.png

  In the content of these methods, we will frequently use the keyword 'this', which represents the instance itself. Each method will directly pass a 'this' parameter for use, we don't need to specifically write it in ().

  But in fact, the operation of 'this' actually refers to the object that calls it. Although this mechanism can accomplish the above meaning for the most part, it will cause problems in the following situations.

  .image pic/61/2.png

  The object mentioned above that calls the methods is accountingCopy, not an instance of the Department class. However, accountingCopy does not have the property 'name', resulting in 'this.name' being undefined.


* Set type to 'this'

** type concept is different
   We can define the type of 'this' in the methods within a class as follows. TypeScript has a different concept for defining 'this' compared to defining a regular variable. Here, we are defining that 'this' must refer to a variable of a specific type.

   .image pic/61/3.png

** class can be used as type
   Because class is a concept of blueprint, it can also be used as a type. Therefore, we can naturally make 'this' point to the type 'Department' as above.

   As long as 'this' refers to a variable in TypeScript that has a type of 'Department', it will not yell, and it does not need to be an instance of the class Department.

   .image pic/61/4.png

   So, by adding the property 'name' to the accountingCopy object in accountingCopy, it will pass TypeScript's validation, even if accountingCopy is a literal object.
